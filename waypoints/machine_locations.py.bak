carding_machines = {
  1: [(34.89,1.7055,3.14),(32.575,1.7055,1.57)],
  2: [(31.29,1.7055,3.14),(28.975,1.7055,1.57)],
  3: [(27.69,1.7055,3.14),(25.375,1.7055,1.57)],
  4: [(24.09,1.7055,3.14),(21.775,1.7055,1.57)],
  5: [(20.49,1.7055,3.14),(18.175,1.7055,1.57)],
  6: [(16.89,1.7055,3.14),(14.575,1.7055,1.57)],
  7: [(13.29,1.7055,3.14),(10.975,1.7055,1.57)],
  8: [(9.69,1.7055,3.14),(7.375,1.7055,1.57)],
  9: [(6.09,1.7055,3.14),(3.775,1.7055,1.57)],
  10: [(34.89,-23.329,3.14),(32.575,-23.329,1.57)],
  11: [(31.29,-23.329,3.14),(28.975,-23.329,1.57)],
  12: [(27.69,-23.329,3.14),(25.375,-23.329,1.57)],
  13: [(24.09,-23.329,3.14),(21.775,-23.329,1.57)],
  14: [(20.49,-23.329,3.14),(18.175,-23.329,1.57)],
  15: [(16.89,-23.329,3.14),(14.575,-23.329,1.57)],
  16: [(13.29,-23.329,3.14),(10.975,-23.329,1.57)],
  17: [(9.69,-23.329,3.14),(7.375,-23.329,1.57)],
  18: [(6.09,-23.329,3.14),(3.775,-23.329,1.57)],
  19: [(-5.06,1.7055,3.14),(-7.375,1.7055,1.57)],
  20: [(-8.66,1.7055,3.14),(-10.975,1.7055,1.57)],
  21: [(-12.26,1.7055,3.14),(-14.575,1.7055,1.57)],
  22: [(-15.86,1.7055,3.14),(-18.175,1.7055,1.57)],
  23: [(-19.46,1.7055,3.14),(-21.775,1.7055,1.57)],
  24: [(-23.06,1.7055,3.14),(-25.375,1.7055,1.57)],
  25: [(-26.66,1.7055,3.14),(-28.975,1.7055,1.57)],
  26: [(-30.26,1.7055,3.14),(-32.575,1.7055,1.57)],
  27: [(-33.86,1.7055,3.14),(-36.175,1.7055,1.57)],
  28: [(-5.06,-23.329,3.14),(-7.375,-23.329,1.57)],
  29: [(-8.66,-23.329,3.14),(-10.975,-23.329,1.57)],
  30: [(-12.26,-23.329,3.14),(-14.575,-23.329,1.57)],
  31: [(-15.86,-23.329,3.14),(-18.175,-23.329,1.57)],
  32: [(-19.46,-23.329,3.14),(-21.775,-23.329,1.57)],
  33: [(-23.06,-23.329,3.14),(-25.375,-23.329,1.57)],
  34: [(-26.66,-23.329,3.14),(-28.975,-23.329,1.57)],
  35: [(-30.26,-23.329,3.14),(-32.575,-23.329,1.57)],
  36: [(-33.86,-23.329,3.14),(-36.175,-23.329,1.57)],
}

draw_frames = {
  0: {
    1: (30.49625,4.1555,3.14),
    2: (26.90375,4.1555,3.14),
    3: (17.88875,4.1555,3.14),
    4: (9.88125,4.1555,3.14),
    5: (6.28875,4.1555,3.14),
    6: (-6.28875,4.1555,3.14),
    7: (-9.88125,4.1555,3.14),
    8: (-18.89625,4.1555,3.14),
    9: (-26.90375,4.1555,3.14),
    10: (-30.49625,4.1555,3.14),
  },
  'A':{
    1: [(32.3,9.1995,-1.57),(32.3,7.8995,-1.57),(32.3,6.5995,-1.57),(32.3,5.2995,-1.57)],
    2: [(25.1,9.1995,-1.57),(25.1,7.8995,-1.57),(25.1,6.5995,-1.57),(25.1,5.2995,-1.57)],
    3: [(16.085,9.1995,-1.57),(16.085,7.8995,-1.57),(16.085,6.5995,-1.57),(16.085,5.2995,-1.57)],
    4: [(11.685,9.1995,-1.57),(11.685,7.8995,-1.57),(11.685,6.5995,-1.57),(11.685,5.2995,-1.57)],
    5: [(4.485,9.1995,-1.57),(4.485,7.8995,-1.57),(4.485,6.5995,-1.57),(4.485,5.2995,-1.57)],
    6: [(-4.485,9.1995,-1.57),(-4.485,7.8995,-1.57),(-4.485,6.5995,-1.57),(-4.485,5.2995,-1.57)],
    7: [(-11.685,9.1995,-1.57),(-11.685,7.8995,-1.57),(-11.685,6.5995,-1.57),(-11.685,5.2995,-1.57)],
    8: [(-20.7,9.1995,-1.57),(-20.7,7.8995,-1.57),(-20.7,6.5995,-1.57),(-20.7,5.2995,-1.57)],
    9: [(-25.1,9.1995,-1.57),(-25.1,7.8995,-1.57),(-25.1,6.5995,-1.57),(-25.1,5.2995,-1.57)],
    10: [(-32.3,9.1995,-1.57),(-32.3,7.8995,-1.57),(-32.3,6.5995,-1.57),(-32.3,5.2995,-1.57)],
  },
  'B':{
    1: [(33.6,9.1995,-1.57),(33.6,7.8995,-1.57),(33.6,6.5995,-1.57),(33.6,5.2995,-1.57)],
    2: [(23.8,9.1995,-1.57),(23.8,7.8995,-1.57),(23.8,6.5995,-1.57),(23.8,5.2995,-1.57)],
    3: [(14.785,9.1995,-1.57),(14.785,7.8995,-1.57),(14.785,6.5995,-1.57),(14.785,5.2995,-1.57)],
    4: [(12.985,9.1995,-1.57),(12.985,7.8995,-1.57),(12.985,6.5995,-1.57),(12.985,5.2995,-1.57)],
    5: [(3.185,9.1995,-1.57),(3.185,7.8995,-1.57),(3.185,6.5995,-1.57),(3.185,5.2995,-1.57)],
    6: [(-3.185,9.1995,-1.57),(-3.185,7.8995,-1.57),(-3.185,6.5995,-1.57),(-3.185,5.2995,-1.57)],
    7: [(-12.985,9.1995,-1.57),(-12.985,7.8995,-1.57),(-12.985,6.5995,-1.57),(-12.985,5.2995,-1.57)],
    8: [(-22.0,9.1995,-1.57),(-22.0,7.8995,-1.57),(-22.0,6.5995,-1.57),(-22.0,5.2995,-1.57)],
    9: [(-23.8,9.1995,-1.57),(-23.8,7.8995,-1.57),(-23.8,6.5995,-1.57),(-23.8,5.2995,-1.57)],
    10: [(-33.6,9.1995,-1.57),(-33.6,7.8995,-1.57),(-33.6,6.5995,-1.57),(-33.6,5.2995,-1.57)],
  }
}

support_points = {
  'A':{  
    1: (32.3,4.1555,1.57),
    2: (25.1,4.1555,1.57),
    3: (16.085,4.1555,1.57),
    4: (11.685,4.1555,1.57),
    5: (4.485,4.1555,1.57),
    6: (-4.485,4.1555,1.57),
    7: (-11.685,4.1555,1.57),
    8: (-20.7,4.1555,1.57),
    9: (-25.1,4.1555,1.57),
    10: (-32.3,4.1555,1.57),
  },
  'B':{
    1:(33.6,4.1555,1.57),
    2:(23.8,4.1555,1.57),
    3:(14.785,4.1555,1.57),
    4:(12.985,4.1555,1.57),
    5:(3.185,4.1555,1.57),
    6:(-3.185,4.1555,1.57),
    7:(-12.985,4.1555,1.57),
    8:(-22.0,4.1555,1.57),
    9:(-23.8,4.1555,1.57),
    10:(-33.6,4.1555,1.57),
  }
}


# import csv
# import pandas as pd

# carding_machines = {}
# draw_frames = {'0': {}, 'A': {}, 'B': {}}

# with open('machine_locations.csv', mode='r') as csvfile:
#     csvreader = csv.reader(csvfile)
#     next(csvreader)

#     for row in csvreader:
#         row = [float(x) if x else pd.NA for x in row]

#         machine_id = int(row[0])
#         carding_machines[machine_id] = [(row[1], row[2], row[3]), (row[4], row[5], row[6])]

#         df_id = int(row[7])
#         draw_frames['0'][df_id] = (row[8], row[9], row[10]) if not pd.isna(row[8]) else pd.NA

#         a_positions = []
#         for i in range(11, 27, 4):
#             if not pd.isna(row[i]):
#                 a_positions.append((row[i], row[i+1], row[i+2]))
#         if a_positions:
#             draw_frames['A'][df_id] = a_positions

#         # Extract B positions
#         b_positions = []
#         for i in range(27, 43, 4): 
#             if not pd.isna(row[i]):
#                 b_positions.append((row[i], row[i+1], row[i+2]))
#         if b_positions:
#             draw_frames['B'][df_id] = b_positions

# draw_frames['0'] = {k: v for k, v in draw_frames['0'].items() if not pd.isna(v)}
# draw_frames['A'] = {k: v for k, v in draw_frames['A'].items() if v}
# draw_frames['B'] = {k: v for k, v in draw_frames['B'].items() if v}

# print("carding_machines = {")
# for k, v in carding_machines.items():
#     print(f"  {k}: {v},")
# print("}\n")

# print("draw_frames = {")
# for k, v in draw_frames.items():
#     print(f"  '{k}':{v},")
# print("}")
